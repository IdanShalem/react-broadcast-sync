{"version":3,"file":"index.esm.js","sources":["../src/useBroadcastChannel.ts","../src/BroadcastProvider.tsx"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { BroadcastActions, BroadcastMessage, BroadcastOptions, SendMessageOptions } from './types/types';\n\n// Generate a random 9-character alphanumeric string\nconst generateRandomPart = () => Math.random().toString(36).substr(2, 9);\n\n// Hashing function (simple base64 for uniqueness & readability)\nconst generateId = (source: string, timestamp: number) => {\n  const raw = `${generateRandomPart()}-${source}-${timestamp}`;\n  return btoa(raw).replace(/=+$/, '');\n};\n\nconst generateSourceName = () => `tab-${generateRandomPart()}`;\n\nexport const useBroadcastChannel = (\n  channelName: string,\n  options: BroadcastOptions = {}\n): BroadcastActions => {\n  const {\n    sourceName,\n    cleaningInterval = 1000,\n    keepLatestMessage = false,\n    registeredTypes = [], \n    namespace = '', \n  } = options;\n\n  const [messages, setMessages] = useState<BroadcastMessage[]>([]);\n  const [sentMessages, setSentMessages] = useState<BroadcastMessage[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const channel = useRef<BroadcastChannel | null>(null);\n  const receivedMessageIds = useRef(new Set<string>());\n  const source = useRef(sourceName || generateSourceName()).current;\n\n\n  const setErrorMessage = (error: string) => {\n    setError(error);\n    setTimeout(() => setError(null), 3000);\n  };\n\n  useEffect(() => {\n    const namespacedChannel = `${channelName}-${namespace}`;\n    console.log('namespacedChannel:', namespacedChannel)\n    const bc = new BroadcastChannel(namespacedChannel);\n    console.log('setting channel:', bc)\n    channel.current = bc;\n\n    const handleMessage = (event: MessageEvent) => {\n      try {\n        const message: BroadcastMessage = event.data;\n        if (!message || typeof message !== 'object' || !message.id) return;\n        // Ignore messages sent by this instance\n        if (message.source === source) return;\n\n        // Check message type and ensure it matches the registered types\n        if (registeredTypes.length > 0 && !registeredTypes.includes(message.type)) {\n          return;\n        }\n\n        // Handle internal clear instructions\n        if (message.type === '__CLEAR_MESSAGE__') {\n          setMessages((prev) =>\n            prev.filter((msg) => {\n              return !(msg.id === message.id && msg.source === message.source)\n            })\n          );\n          return;\n        }\n\n        if (message.type === '__CLEAR_ALL_MESSAGES__') {\n          setMessages((prev) => prev.filter((msg) => msg.source !== message.source));\n          return;\n        }\n\n        const now = Date.now();\n        // Handle message expiration (TTL logic)\n        if (message.expirationDate && message.expirationDate < now) {\n          return;\n        }\n        \n        if (receivedMessageIds.current.has(message.id)) return;\n        receivedMessageIds.current.add(message.id);\n        // If TTL is not expired, add to messages\n        setMessages((prevMessages) => {\n          return keepLatestMessage ? [message] : [...prevMessages, message]\n        });\n      } catch (e) {\n        setErrorMessage('Error processing broadcast message');\n      }\n    };\n\n    bc.addEventListener('message', handleMessage);\n    return () => {\n      bc.removeEventListener('message', handleMessage);\n      bc.close();\n    };\n  }, [channelName, namespace, keepLatestMessage, JSON.stringify(registeredTypes)]);\n\n  useEffect(() => {\n    if (cleaningInterval <= 0) return;\n\n    const interval = setInterval(() => {\n      setMessages((prevMessages) =>\n        prevMessages.filter((msg) => !msg.expirationDate || msg.expirationDate > Date.now())\n      );\n    }, cleaningInterval);\n\n    return () => clearInterval(interval);\n  }, [cleaningInterval]);\n\n  const postMessage = (\n    messageType: string,\n    messageContent: any,\n    options: SendMessageOptions = {}\n  ) => {\n    const channelCurrent = channel.current;\n    if (!channelCurrent) {\n      setErrorMessage('Channel not available');\n      console.error('Attempted to post message, but channel is null');\n      return;\n    }\n\n    const timestamp = Date.now();\n    const id = generateId(source, timestamp);\n    const message: BroadcastMessage = {\n      id,\n      type: messageType,\n      message: messageContent,\n      timestamp,\n      source,\n      expirationDate: options.expirationDate ??\n        (options.expirationDuration ? timestamp + options.expirationDuration : undefined),\n    };\n\n    try {\n      channelCurrent?.postMessage(message);\n      setSentMessages((prev) => [...prev, message]); // Save the message to sentMessages\n    } catch (e) {\n      setErrorMessage('Failed to send message');\n    }\n  };\n\n  const clearMessage = (id: string) => {\n    setMessages((prev) => prev.filter((msg) => msg.id !== id));\n    setSentMessages((prev) => prev.filter((msg) => msg.id !== id)); // Remove from sentMessages as well\n    channel.current?.postMessage({ id, type: '__CLEAR_MESSAGE__', source });\n  };\n\n  const clearAllMessages = () => {\n    setMessages([]);\n    setSentMessages([]); // Clear all sent messages\n    channel.current?.postMessage({ id: '__CLEAR_ALL_MESSAGES__', type: '__CLEAR_ALL_MESSAGES__', source });\n  };\n\n  const clearSentMessage = (id: string) => {\n    setSentMessages((prev) => prev.filter((msg) => msg.id !== id)); // Clear specific sent message\n    channel.current?.postMessage({ id, type: '__CLEAR_MESSAGE__', source });\n  };\n\n  return {\n    messages,\n    sentMessages,\n    postMessage,\n    clearMessage,\n    clearAllMessages,\n    clearSentMessage,\n    error,\n  };\n};\n\nexport default useBroadcastChannel;\n","import React, { createContext, useContext } from 'react';\nimport { useBroadcastChannel } from './useBroadcastChannel';\nimport { BroadcastMessage } from './types/types';\n\ntype BroadcastContextType = {\n  messages: BroadcastMessage[];\n  postMessage: (messageType: string, messageContent: any) => void;\n  error: string | null;\n};\n\nconst BroadcastContext = createContext<BroadcastContextType | null>(null);\n\nexport function BroadcastProvider({ children }: { children: React.ReactNode }) {\n  const { messages, postMessage, error } = useBroadcastChannel('global');\n\n  return (\n    <BroadcastContext.Provider value={{ messages, postMessage, error }}>\n      {children}    \n    </BroadcastContext.Provider>\n  );\n}\n\nexport function useBroadcast() {\n  const context = useContext(BroadcastContext);\n  if (!context) {\n    throw new Error(\"useBroadcast must be used within a BroadcastProvider\");\n  }\n  return context;\n}\n"],"names":["generateRandomPart","Math","random","toString","substr","generateId","source","timestamp","raw","btoa","replace","generateSourceName","useBroadcastChannel","channelName","options","sourceName","cleaningInterval","keepLatestMessage","registeredTypes","namespace","messages","setMessages","useState","sentMessages","setSentMessages","error","setError","channel","useRef","receivedMessageIds","Set","current","setErrorMessage","setTimeout","useEffect","namespacedChannel","console","log","bc","BroadcastChannel","handleMessage","event","message","data","id","length","includes","type","prev","filter","msg","now","Date","expirationDate","has","add","prevMessages","e","addEventListener","removeEventListener","close","JSON","stringify","interval","setInterval","clearInterval","postMessage","messageType","messageContent","channelCurrent","_a","expirationDuration","undefined","clearMessage","clearAllMessages","clearSentMessage","BroadcastContext","createContext","BroadcastProvider","children","_jsx","Provider","value","useBroadcast","context","useContext","Error"],"mappings":"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"}